// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Scheduler.Data;

namespace Scheduler.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Scheduler.Building", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("Scheduler.Models.Assignation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Block");

                    b.Property<int?>("ClassroomID");

                    b.Property<int>("Day");

                    b.Property<DateTime>("Expiration");

                    b.Property<int?>("ScheduleID");

                    b.Property<int?>("SectionID");

                    b.HasKey("ID");

                    b.HasIndex("ClassroomID");

                    b.HasIndex("ScheduleID");

                    b.HasIndex("SectionID");

                    b.ToTable("Assignations");
                });

            modelBuilder.Entity("Scheduler.Models.AssignationRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Block");

                    b.Property<int?>("ClassroomID");

                    b.Property<string>("Comment");

                    b.Property<int>("Day");

                    b.Property<DateTime>("Expiration");

                    b.Property<string>("ProfessorId");

                    b.Property<int?>("SectionID");

                    b.HasKey("ID");

                    b.HasIndex("ClassroomID");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("SectionID");

                    b.ToTable("AssignationRequests");
                });

            modelBuilder.Entity("Scheduler.Models.Career", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DirectorId");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("DirectorId");

                    b.ToTable("Careers");
                });

            modelBuilder.Entity("Scheduler.Models.Classroom", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BuildingID");

                    b.Property<int>("Capacity");

                    b.Property<string>("Name");

                    b.Property<int?>("ScheduleID");

                    b.HasKey("ID");

                    b.HasIndex("BuildingID");

                    b.HasIndex("ScheduleID");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("Scheduler.Models.Schedule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.HasKey("ID");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Scheduler.Models.Section", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FridayData");

                    b.Property<string>("MondayData");

                    b.Property<string>("Name");

                    b.Property<string>("ProfessorId");

                    b.Property<string>("SaturdayData");

                    b.Property<int>("Students");

                    b.Property<int?>("SubjectID");

                    b.Property<string>("ThursdayData");

                    b.Property<string>("TuesdayData");

                    b.Property<string>("WednesdayData");

                    b.HasKey("ID");

                    b.HasIndex("SubjectID");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Scheduler.Models.Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CareerID");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("CareerID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Scheduler.Models.UserData", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("UsersData");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Scheduler.Models.Assignation", b =>
                {
                    b.HasOne("Scheduler.Models.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomID");

                    b.HasOne("Scheduler.Models.Schedule")
                        .WithMany("Assignations")
                        .HasForeignKey("ScheduleID");

                    b.HasOne("Scheduler.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionID");
                });

            modelBuilder.Entity("Scheduler.Models.AssignationRequest", b =>
                {
                    b.HasOne("Scheduler.Models.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomID");

                    b.HasOne("Scheduler.Models.UserData", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId");

                    b.HasOne("Scheduler.Models.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionID");
                });

            modelBuilder.Entity("Scheduler.Models.Career", b =>
                {
                    b.HasOne("Scheduler.Models.UserData", "Director")
                        .WithMany()
                        .HasForeignKey("DirectorId");
                });

            modelBuilder.Entity("Scheduler.Models.Classroom", b =>
                {
                    b.HasOne("Scheduler.Building", "Building")
                        .WithMany("Classrooms")
                        .HasForeignKey("BuildingID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Scheduler.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleID");
                });

            modelBuilder.Entity("Scheduler.Models.Section", b =>
                {
                    b.HasOne("Scheduler.Models.Subject")
                        .WithMany("Sections")
                        .HasForeignKey("SubjectID");
                });

            modelBuilder.Entity("Scheduler.Models.Subject", b =>
                {
                    b.HasOne("Scheduler.Models.Career")
                        .WithMany("Subjects")
                        .HasForeignKey("CareerID");
                });
#pragma warning restore 612, 618
        }
    }
}
